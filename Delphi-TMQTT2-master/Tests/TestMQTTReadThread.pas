unit TestMQTTReadThread;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit 
  being tested.

}

interface

uses
  TestFramework, Windows, MQTTReadThread, Generics.Collections, SmartInspect, Classes,
  SysUtils, MQTTHeaders, blcksock, SyncObjs, SiAuto;

type
  // Test methods for class TMQTTRecvUtilities

  TestTMQTTRecvUtilities = class(TTestCase)
  strict private
    FMQTTRecvUtilities: TMQTTRecvUtilities;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestMSBLSBToInt;
    procedure TestRLBytesToInt;
  end;
  // Test methods for class TUnparsedMsg

  TestTUnparsedMsg = class(TTestCase)
  strict private
    FUnparsedMsg: TUnparsedMsg;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  end;
  // Test methods for class TMQTTReadThread

  TestTMQTTReadThread = class(TTestCase)
  strict private
    FMQTTReadThread: TMQTTReadThread;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  end;

implementation

procedure TestTMQTTRecvUtilities.SetUp;
begin
  FMQTTRecvUtilities := TMQTTRecvUtilities.Create;
end;

procedure TestTMQTTRecvUtilities.TearDown;
begin
  FMQTTRecvUtilities.Free;
  FMQTTRecvUtilities := nil;
end;

procedure TestTMQTTRecvUtilities.TestMSBLSBToInt;
var
  ReturnValue: Integer;
  ALengthBytes: TBytes;
begin
  ALengthBytes := TMQTTUtilities.IntToMSBLSB(6);
  ReturnValue := FMQTTRecvUtilities.MSBLSBToInt(ALengthBytes);
  Assert(ReturnValue = 6, 'MSBLSBToInt on 6');
  ALengthBytes := TMQTTUtilities.IntToMSBLSB(0);
  ReturnValue := FMQTTRecvUtilities.MSBLSBToInt(ALengthBytes);
  Assert(ReturnValue = 0, 'MSBLSBToInt on 0');
  ALengthBytes := TMQTTUtilities.IntToMSBLSB(101);
  ReturnValue := FMQTTRecvUtilities.MSBLSBToInt(ALengthBytes);
  Assert(ReturnValue = 101, 'MSBLSBToInt on 101');
end;

procedure TestTMQTTRecvUtilities.TestRLBytesToInt;
var
  ReturnValue: Integer;
  ARlBytes: TBytes;
begin
  ARlBytes := TMQTTUtilities.RLIntToBytes(0);
  ReturnValue := FMQTTRecvUtilities.RLBytesToInt(ARlBytes);
  Assert(ReturnValue = 0, 'RLBytes on 0');
  ARlBytes := TMQTTUtilities.RLIntToBytes(6);
  ReturnValue := FMQTTRecvUtilities.RLBytesToInt(ARlBytes);
  Assert(ReturnValue = 6, 'RLBytes on 6');
  ARlBytes := TMQTTUtilities.RLIntToBytes(40);
  ReturnValue := FMQTTRecvUtilities.RLBytesToInt(ARlBytes);
  Assert(ReturnValue = 40, 'RLBytes on 40');
  ARlBytes := TMQTTUtilities.RLIntToBytes(112);
  ReturnValue := FMQTTRecvUtilities.RLBytesToInt(ARlBytes);
  Assert(ReturnValue = 112, 'RLBytes on 112');
  ARlBytes := TMQTTUtilities.RLIntToBytes(512);
  ReturnValue := FMQTTRecvUtilities.RLBytesToInt(ARlBytes);
  Assert(ReturnValue = 512, 'RLBytes on 512');
end;

procedure TestTUnparsedMsg.SetUp;
begin
  //FUnparsedMsg := TUnparsedMsg.Create;
  //Assert(FUnparsedMsg <> nil, 'Create failed');
end;

procedure TestTUnparsedMsg.TearDown;
begin
  //FUnparsedMsg.Free;
  //FUnparsedMsg := nil;
end;

procedure TestTMQTTReadThread.SetUp;
begin
  //FMQTTReadThread := TMQTTReadThread.Create;
  Assert(FMQTTReadThread <> nil, 'Thread Creation Failed');
end;

procedure TestTMQTTReadThread.TearDown;
begin
  FMQTTReadThread.Free;
  FMQTTReadThread := nil;
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TestTMQTTRecvUtilities.Suite);
  RegisterTest(TestTUnparsedMsg.Suite);
  RegisterTest(TestTMQTTReadThread.Suite);
end.

