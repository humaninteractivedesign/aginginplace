unit TestMQTT;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit 
  being tested.

}

interface

uses
  TestFramework, MQTT, Generics.Collections, Types, Classes, ExtCtrls, SysUtils,
  MQTTHeaders, MQTTReadThread, blcksock, SyncObjs, SmartInspect, SiAuto;

type
  // Test methods for class TMQTT

  TestTMQTT = class(TTestCase)
  strict private
    FMQTT: TMQTT;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestgetNextMessageId;
    procedure TestConnectMessage;
    procedure TestDisconnectMessage;
    procedure TestPublishMessage;
    procedure TestPingReqMessage;
    procedure TestSubscribeMessage;
    procedure TestUnsubscribeMessage;
    procedure TestConnect;
    procedure TestDisconnect;
    procedure TestPublish;
    procedure TestPublish1;
    procedure TestPublish2;
    procedure TestSubscribe;
    procedure TestSubscribe1;
    procedure TestUnsubscribe;
    procedure TestUnsubscribe1;
    procedure TestPingReq;
  end;

implementation

procedure TestTMQTT.SetUp;
begin
  FMQTT := TMQTT.Create('localhost', 1883);
end;

procedure TestTMQTT.TearDown;
begin
  FMQTT.Free;
  FMQTT := nil;
end;

procedure TestTMQTT.TestgetNextMessageId;
var
  ReturnValue: Integer;
begin
  //ReturnValue := FMQTT.getNextMessageId;
  // TODO: Validate method results
end;

procedure TestTMQTT.TestConnectMessage;
var
  ReturnValue: TMQTTMessage;
begin
  //ReturnValue := FMQTT.ConnectMessage;
  // TODO: Validate method results
end;

procedure TestTMQTT.TestDisconnectMessage;
var
  ReturnValue: TMQTTMessage;
begin
  //ReturnValue := FMQTT.DisconnectMessage;
  // TODO: Validate method results
end;

procedure TestTMQTT.TestPublishMessage;
var
  ReturnValue: TMQTTMessage;
begin
  //ReturnValue := FMQTT.PublishMessage;
  // TODO: Validate method results
end;

procedure TestTMQTT.TestPingReqMessage;
var
  ReturnValue: TMQTTMessage;
  msgBytes: TBytes;
begin
  //ReturnValue := FMQTT.PingReqMessage;
  // TODO: Validate method results
  ReturnValue := TMQTTMessage.Create;
  ReturnValue.FixedHeader.MessageType := Ord(TMQTTMessageType.PINGREQ);
  msgBytes := ReturnValue.ToBytes;

end;

procedure TestTMQTT.TestSubscribeMessage;
var
  ReturnValue: TMQTTMessage;
begin
  //ReturnValue := FMQTT.SubscribeMessage;
  // TODO: Validate method results
end;

procedure TestTMQTT.TestUnsubscribeMessage;
var
  ReturnValue: TMQTTMessage;
begin
  //ReturnValue := FMQTT.UnsubscribeMessage;
  // TODO: Validate method results
end;

procedure TestTMQTT.TestConnect;
var
  ReturnValue: Boolean;
begin
  //ReturnValue := FMQTT.Connect;
  // TODO: Validate method results
end;

procedure TestTMQTT.TestDisconnect;
var
  ReturnValue: Boolean;
begin
  //ReturnValue := FMQTT.Disconnect;
  // TODO: Validate method results
end;

procedure TestTMQTT.TestPublish;
var
  ReturnValue: Boolean;
  sPayload: string;
  Topic: string;
begin
  // TODO: Setup method call parameters
  //ReturnValue := FMQTT.Publish(Topic, sPayload);
  // TODO: Validate method results
end;

procedure TestTMQTT.TestPublish1;
var
  ReturnValue: Boolean;
  Retain: Boolean;
  sPayload: string;
  Topic: string;
begin
  // TODO: Setup method call parameters
  //ReturnValue := FMQTT.Publish(Topic, sPayload, Retain);
  // TODO: Validate method results
end;

procedure TestTMQTT.TestPublish2;
var
  ReturnValue: Boolean;
  QoS: Integer;
  Retain: Boolean;
  sPayload: string;
  Topic: string;
begin
  // TODO: Setup method call parameters
  //ReturnValue := FMQTT.Publish(Topic, sPayload, Retain, QoS);
  // TODO: Validate method results
end;

procedure TestTMQTT.TestSubscribe;
var
  ReturnValue: Integer;
  RequestQoS: Integer;
  Topic: string;
begin
  // TODO: Setup method call parameters
  //ReturnValue := FMQTT.Subscribe(Topic, RequestQoS);
  // TODO: Validate method results
end;

procedure TestTMQTT.TestSubscribe1;
var
  ReturnValue: Integer;
  //Topics: TDictionary<System.Object, >;
begin
  // TODO: Setup method call parameters
  //ReturnValue := FMQTT.Subscribe(Topics);
  // TODO: Validate method results
end;

procedure TestTMQTT.TestUnsubscribe;
var
  ReturnValue: Integer;
  Topic: string;
begin
  // TODO: Setup method call parameters
  //ReturnValue := FMQTT.Unsubscribe(Topic);
  // TODO: Validate method results
end;

procedure TestTMQTT.TestUnsubscribe1;
var
  ReturnValue: Integer;
  Topics: TStringList;
begin
  // TODO: Setup method call parameters
  //ReturnValue := FMQTT.Unsubscribe(Topics);
  // TODO: Validate method results
end;

procedure TestTMQTT.TestPingReq;
var
  ReturnValue: Boolean;
begin
  //ReturnValue := FMQTT.PingReq;
  // TODO: Validate method results
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TestTMQTT.Suite);
end.

